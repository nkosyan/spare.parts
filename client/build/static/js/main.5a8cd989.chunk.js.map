{"version":3,"sources":["constants/defaults.js","components/Products/ProductsTable.js","components/Products/index.js","App.js","serviceWorker.js","index.js"],"names":["HEADERS","ACTIONS","NAME","CODE","FIRM","COST","SHOP_QTY","STORE_QTY","ADD","EditableContext","React","createContext","EditableCell","getInput","_this","props","inputType","react_default","a","createElement","input_number","input","renderCell","_ref","getFieldDecorator","_this$props","editing","dataIndex","title","record","children","restProps","Object","objectWithoutProperties","es_form","Item","style","margin","rules","required","message","concat","initialValue","Consumer","this","Component","EditableTable","_this2","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isEditing","_id","state","editingKey","cancel","setState","data","columns","key","width","editable","render","text","form","href","onClick","save","marginRight","icon","type","popconfirm","onConfirm","disabled","edit","delete","self","axios","get","then","response","catch","error","console","log","_this3","validateFields","row","newData","toConsumableArray","index","findIndex","item","updatedRow","objectSpread","put","splice","push","name","code","firm","cost","store_qty","shop_qty","_this4","components","body","cell","map","col","onCell","Provider","value","es_button","add","table","bordered","dataSource","rowClassName","pagination","onChange","Form","create","Products","ProductsTable","App","className","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a8cd989.chunk.js","sourcesContent":["export const PRODUCTS = 'Ապրանքներ';\r\nexport const SEARCH = 'Փնտրել';\r\nexport const SHOP = 'Խանութ';\r\nexport const STORE = 'Պահեստ';\r\nexport const QUANTITY = 'քանակ';\r\n\r\nexport const HEADERS = {\r\n    NAME: 'Անվանում',\r\n    CODE: 'Կոդ',\r\n    FIRM: 'Ֆիրմա',\r\n    COST: 'Ինքնարժեք',\r\n    SHOP_QTY: 'Խանութ քանակ',\r\n    STORE_QTY: 'Պահեստ քանակ',\r\n};\r\n\r\nexport const ACTIONS = {\r\n    ADD: 'Ավելացնել',\r\n    EDIT: 'Խմբագրել',\r\n    DELETE: 'Հեռացնել',\r\n    SELL: 'Վաճառել',\r\n};","import React, {Component} from 'react';\r\nimport { PRODUCTS, HEADERS, ACTIONS } from '../../constants/defaults';\r\nimport { Table, Input, InputNumber, Popconfirm, Form,Divider,Modal,Button, Icon } from 'antd';\r\nimport axios from \"axios\";\r\n\r\nconst { NAME, CODE, FIRM, COST, SHOP_QTY, STORE_QTY } = HEADERS;\r\nconst { ADD, EDIT, DELETE, SELL } = ACTIONS;\r\nconst EditableContext = React.createContext();\r\n\r\nclass EditableCell extends React.Component {\r\n  getInput = () => this.props.inputType === 'number' ? <InputNumber /> : <Input />;\r\n\r\n  renderCell = ({ getFieldDecorator }) => {\r\n    const { editing, dataIndex, title, record, children, ...restProps } = this.props;\r\n    return <td {...restProps}>\r\n      {\r\n        editing\r\n          ? <Form.Item style={{ margin: 0 }}>\r\n            {getFieldDecorator(dataIndex, {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: `Please Input ${title}!`,\r\n                },\r\n              ],\r\n              initialValue: record[dataIndex],\r\n            })(this.getInput())}\r\n            </Form.Item>\r\n          : children\r\n      }\r\n    </td>;\r\n  };\r\n\r\n  render() {\r\n    return <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>;\r\n  }\r\n}\r\n\r\nclass EditableTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { data: [], editingKey: '' };\r\n    this.columns = [\r\n      {\r\n        title: NAME,\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        width: '25%',\r\n        editable: true,\r\n      },\r\n      {\r\n        title: CODE,\r\n        dataIndex: 'code',\r\n        key: 'code',\r\n        editable: true,\r\n      },\r\n      {\r\n        title: FIRM,\r\n        dataIndex: 'firm',\r\n        key: 'firm',\r\n        editable: true,\r\n      },\r\n      {\r\n        title: COST,\r\n        dataIndex: 'cost',\r\n        key: 'cost',\r\n        editable: true,\r\n      },\r\n      {\r\n        title: SHOP_QTY,\r\n        dataIndex: 'shop_qty',\r\n        key: 'shop_qty',\r\n        width: '15%',\r\n        editable: true,\r\n      },\r\n      {\r\n        title: STORE_QTY,\r\n        dataIndex: 'store_qty',\r\n        key: 'store_qty',\r\n        width: '15%',\r\n        editable: true,\r\n      },\r\n      {\r\n        dataIndex: 'operation',\r\n        render: (text, record) => {\r\n          const { editingKey } = this.state;\r\n          const editable = this.isEditing(record);\r\n          return editable\r\n            ? <span>\r\n                <EditableContext.Consumer>\r\n                  {\r\n                    form => <a href=\"#\" onClick={() => this.save(form, record._id)} style={{ marginRight: 8 }}><Icon type=\"save\" /></a>\r\n                  }\r\n                </EditableContext.Consumer>\r\n                <Popconfirm title=\"Sure to cancel?\" onConfirm={() => this.cancel(record._id)}>\r\n                  <a>Cancel</a>\r\n                </Popconfirm>\r\n              </span>\r\n          : <span>\r\n              <a disabled={editingKey !== ''} onClick={() => this.edit(record._id)}><Icon type=\"edit\" /></a>\r\n              <a disabled={editingKey !== ''}>\r\n                <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.delete(record._id)}>\r\n                  <Icon type=\"delete\" />\r\n                </Popconfirm>\r\n              </a>\r\n            </span>;\r\n        },\r\n      },\r\n    ];\r\n  }\r\n\r\n  componentDidMount() {\r\n    const self = this;\r\n    axios.get('http://localhost:8080/api/products')\r\n      .then(function (response) {\r\n        const { data: { data } } = response;\r\n        self.setState({ data });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  isEditing = record => record._id === this.state.editingKey;\r\n\r\n  cancel = () => {\r\n    this.setState({ editingKey: '' });\r\n  };\r\n\r\n  save(form, _id) {\r\n    form.validateFields((error, row) => {\r\n      if (error) {\r\n        return;\r\n      }\r\n      const newData = [...this.state.data];\r\n      const index = newData.findIndex(item => _id === item._id);\r\n      if (index > -1) {\r\n        const updatedRow = {\r\n          ...newData[index],\r\n          ...row,\r\n          // update_date: new Date(),\r\n        };\r\n\r\n\r\n        const self = this;\r\n        axios.put(`http://localhost:8080/api/products/${_id}`, updatedRow)\r\n          .then(function (response) {\r\n            const { data: { data } } = response;\r\n            newData.splice(index, 1, data);\r\n            self.setState({ data: newData, editingKey: '' });\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n\r\n\r\n      } else {\r\n        newData.push(row);\r\n        this.setState({ data: newData, editingKey: '' });\r\n      }\r\n    });\r\n  }\r\n\r\n  add() {\r\n    const index = this.state.data.findIndex(item => -1 === item._id);\r\n    if (index > -1) {\r\n      return;\r\n    }\r\n    const newRow = {\r\n      _id: -1,\r\n      name: '',\r\n      code: '',\r\n      firm: '',\r\n      cost: '',\r\n      store_qty: '',\r\n      shop_qty: '',\r\n    };\r\n    const newData = [newRow, ...this.state.data];\r\n    this.setState({ data: newData, editingKey: -1 });\r\n  }\r\n\r\n  edit(key) {\r\n    this.setState({ editingKey: key });\r\n  }\r\n\r\n  delete(_id) {\r\n    const self = this;\r\n    axios.delete(`http://localhost:8080/api/products/${_id}`)\r\n      .then(function (response) {\r\n        const newData = [...self.state.data];\r\n        const index = newData.findIndex(item => _id === item._id);\r\n        if (index > -1) {\r\n          newData.splice(index, 1);\r\n          self.setState({ data: newData });\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const components = {\r\n      body: {\r\n          cell: EditableCell,\r\n      },\r\n    };\r\n\r\n    const columns = this.columns.map(col => {\r\n      if (!col.editable) {\r\n        return col;\r\n      }\r\n      return {\r\n        ...col,\r\n        onCell: record => ({\r\n            record,\r\n            inputType: col.dataIndex === 'shop_qty' || col.dataIndex === 'store_qty' ? 'number' : 'text',\r\n            dataIndex: col.dataIndex,\r\n            title: col.title,\r\n            editing: this.isEditing(record),\r\n        }),\r\n      };\r\n    });\r\n\r\n    return <EditableContext.Provider value={this.props.form}>\r\n      <Button onClick={() => this.add()}>\r\n        {ADD}\r\n      </Button>\r\n      <Table\r\n        components={components}\r\n        bordered\r\n        dataSource={this.state.data}\r\n        columns={columns}\r\n        rowClassName=\"editable-row\"\r\n        pagination={{\r\n            onChange: this.cancel,\r\n        }}\r\n      />\r\n    </EditableContext.Provider>;\r\n  }\r\n}\r\n\r\nexport default Form.create()(EditableTable);\r\n\r\n\r\n// class ProductsTable extends Component{\r\n//     constructor(props){\r\n//         super(props);\r\n//         this.state = {\r\n//             editRows: {\r\n//                 name: '',\r\n//                 email: '',\r\n//                 gender: '',\r\n//             },\r\n//         }\r\n//     }\r\n//\r\n//     sendData = (name,email,gender) => {\r\n//         this.props.getRowData(name,email,gender)\r\n//     }\r\n//     showDeleteConfirm = ()=> {\r\n//         Modal.confirm({\r\n//             title: 'Are you sure delete this task?',\r\n//             content: 'Some descriptions',\r\n//             okText: 'Yes',\r\n//             okType: 'danger',\r\n//             cancelText: 'No',\r\n//             onOk() {\r\n//                 console.log('OK');\r\n//             },\r\n//             onCancel() {\r\n//                 console.log('Cancel');\r\n//             },\r\n//         });\r\n//     };\r\n//\r\n//     columns = [\r\n//         {\r\n//             title: NAME,\r\n//             dataIndex: 'name',\r\n//             key: 'name'\r\n//         },\r\n//         {\r\n//             title: CODE,\r\n//             dataIndex: 'code',\r\n//             key: 'code'\r\n//         },\r\n//         {\r\n//             title: FIRM,\r\n//             dataIndex: 'firm',\r\n//             key: 'firm'\r\n//         },\r\n//         {\r\n//             title: COST,\r\n//             dataIndex: 'cost',\r\n//             key: 'cost'\r\n//         },\r\n//         {\r\n//             title: SHOP_QTY,\r\n//             dataIndex: 'shop_qty',\r\n//             key: 'shop_qty'\r\n//         },\r\n//         {\r\n//             title: STORE_QTY,\r\n//             dataIndex: 'store_qty',\r\n//             key: 'store_qty'\r\n//         },\r\n//         {\r\n//             dataIndex: 'action',\r\n//             key: 'action',\r\n//             render: ( a, {name, email, gender }) => <span>\r\n//                     <Button onClick={ () => this.sendData(name,email,gender) || this.props.setVisible()}>{EDIT}</Button>\r\n//                     <Divider type=\"vertical\" />\r\n//                     <Button onClick={this.showDeleteConfirm}>{DELETE}</Button>\r\n//                 </span>\r\n//         }\r\n//     ]\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 {PRODUCTS}\r\n//                 <Table columns={this.columns} dataSource={this.props.dataSource} rowKey=\"key\"/>\r\n//             </div>\r\n//\r\n//         )\r\n//     }\r\n// }\r\n// export default ProductsTable;","import React from 'react';\r\n\r\nimport ProductsTable from './ProductsTable';\r\n\r\nexport default () => <ProductsTable />;","import React from 'react';\nimport Products from './components/Products'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\"><Products />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}